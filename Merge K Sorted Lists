/*
Merge K Sorted Lists and return it as one sorted list
Two steps:
1. compare the first value each sorted list, put the smaller one into minHeap
2. get sorted list from minHeap
*/
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public ListNode mergeKLists(ListNode[] lists) {
        //check the list 
        if (lists == null || lists.length == 0) 
            return null;
        // add first node of each list to the minHeap
        PriorityQueue<ListNode> minHeap = new PriorityQueue<ListNode>((n1, n2) -> n1.val - n2.val);
        for (ListNode node : lists){
            if (node != null){
                minHeap.add(node);
            }
        }
        // if no node was added to the minHeap we return null
        if (minHeap.isEmpty()){
            return null;
        }
        // save head since we need to return it
        ListNode head = minHeap.peek();
        
        //
        while (!minHeap.isEmpty()){
            //extract node from minHeap
            ListNode node = minHeap.poll();
            if (node.next != null){
                minHeap.add(node.next); // add next node to minHeap
            }
            if (minHeap.peek() != null){
                node.next = minHeap.peek(); //set node. next
            }
        }
        return head;
        
    }
}
