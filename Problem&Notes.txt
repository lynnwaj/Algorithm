leetcode
136 single number
Given a non-empty array of integers, every element appears twice except for one. Find that single one.
XOR Operator
Bitwise XOR in Java
0^N=N
N^N=0
if N in a arrange is single
N1^N1^N2^N2^N3^N3…^N=N
class Solution {
public int singleNumber(int[] nums) {
int result=0;
for (int i=0;i<nums.length;i++){
result^=nums[i];
}
return result;

    }

}
    
     

292 Nim Game
return n%4！=0；
两个人玩取石头游戏，那到最后一个石头的人赢，每人每次可以取1-3个石头，每个人都想赢，你是第一个拿石头的人

如果是4个石头第一个拿的人肯定输
如果是5个石头第一个人拿1个肯定能赢
如果是6个石头第一个人拿2个肯定能赢
如果是7个石头第一个人拿3个肯定能赢
如果是8个石头不管第一个人拿几个肯定留给第二个人5-7个石头，第一个拿的人肯定输
以此类推，4是一个循环，如果n%4=0，第一个拿的人肯定输

104 Depth of Binary Tree
if (root==null)
    Return 0;
else{
    int leftdepth=maxDepth(root.left);
    int rightdepth=maxDepth(root.right);
    return ((leftdepth<rightdepth)?(leftdepth+1):(rightdepth+1);

226 invert binary tree
倒置二叉树，先判断第一个节点是否为null，不是，则
TreeNode left=invertTree(root.left);
TreeNode right=invertTree(root.right);
root.left=right;
root.right=left;
return root;

260 single numberIII
一个数组中有两个数只出现一次，其他都出现两次
Time complexity

![](https://d2mxuefqeaa7sj.cloudfront.net/s_2CF913AB48B29DAC9DF256F6EDE07B2827ECE9727625AD24A5521652920FE8CD_1523385092863_file.jpeg)


Check only how program is behaving for the different input value to perform all the operations like arithmetic, logical, return value and assignment etc
1.constant time complexity
if any program requires fixed amount of time for all input values
eg简单加减乘除
2.linear time complexity
if the amount of time required by an algorithm is increase of input value
eg:for loop
space complexity

![](https://d2mxuefqeaa7sj.cloudfront.net/s_2CF913AB48B29DAC9DF256F6EDE07B2827ECE9727625AD24A5521652920FE8CD_1523385134531_file.jpeg)


1.constant space complexity
if any algorithm requires a fixed amount of space for all input value
eg简单加减乘除
2.linear space complexity
if the amount of space required by an algorithm is increase of input value 
eg for loop
diff&=-diff or diff &=~(diff-1)can find one of different bit,找出最右边不同的那一位数
二进制加法：逢二进一
有四种情况： 0+0=0
0+1=1
1+0=1
1+1=10
0 进位为1
负数二进制，是其正数的反码+1
如果diff=6 →0110
-diff →1010
diff&=-diff→0010
diff最后第二位是1说明这两个不同的数在这一位不同，用这个mask与所有数进行&与运算，如果==0, 说明最后第二位是0,这是一个数,如果是1,则是另一个数

class Solution {
    public int[] singleNumber(int[] nums) 
    {
        int diff=0;
        for(int i:nums)
        {
            diff^=i;
        }
        diff=-diff&diff;//mask as separate the difference 
        int result[]={0,0};
        for(int j:nums)
        {
            if((j & diff)==0)
            {
                result[0]^=j;
            }
            else
            {
                result[1]^=j;
            }
        }
        return result;
    }
}

137 single Number II
一组数组里面所有数都重复3次只有一个重复1次

258 add digit

    https://en.wikipedia.org/wiki/Digital_root#Congruence_formula
    cogruence formula
    return 1+(num-1)%9;

or with loop

    public int getDigitsSum(int num)
    {
        if(num<10)
            return num;
        else
            return getDigitsSum(num/10)+num%10;
    }

202 happy number

class Solution {
    public boolean isHappy(int n) {
        if (n<10){
            if(n==1||n==7){
                return true;
            } //小于10的数里面1，7是happynumber
            else
                return false;
        }
        int sum=0;
        while(n>0)
        {
            sum+=(n%10)*(n%10);
            n=n/10;
        } 
        return isHappy(sum);
    }
}
or

    int digitSquareSum(int n) {
        int sum = 0, tmp;
        while (n) {
            tmp = n % 10;
            sum += tmp * tmp;
            n /= 10;
        }
        return sum;
    }//求平方和函数
    
    bool isHappy(int n) {
        int slow, fast;
        slow = fast = n;
        do {
            slow = digitSquareSum(slow);
            fast = digitSquareSum(fast);
            fast = digitSquareSum(fast);
        } while(slow != fast);
        if (slow == 1) return true;
        else return false;
    }

283. Move Zeroes
把数组中所有零移到最后面
class Solution {

  public void moveZeroes(int[] nums) {
     int temp=0;
        int j=0;
    for (int i=0;i<nums.length;i++){
      if(nums[i]!=0){                                 //判断数是否为零如果不是零
        temp=nums[i];                 
        nums[i]=nums[j];
        nums[j]=temp;
        j++;                                          //不是零的数的计数器
      }
    }
      }

}

238 Product of Array Except Self
Given an array of n integers where n > 1, `nums`, return an array `output` such that `output[i]` is equal to the product of all the elements of `nums` except `nums[i]` . 所有数除了自己以外的乘积
class Solution {

  public int[] productExceptSelf(int[] nums) {
    int[] result=new int[nums.length];
    int temp=1;
    result[0]=1;
    for(int i=1;i<nums.length;i++){
      result[i]=result[i-1]*nums[i-1];   //从左边往右边乘一遍，result[i]存储左边的乘积
    }
       for(int j=nums.length-1;j>=0;j--){   //从右边往左边乘一遍
         result[j]*=temp;                              
         temp*=nums[j];                              //temp存储右边乘积

           }
           return result;
        }
}

94. Binary Tree Inorder Traversal, 144. Binary Tree Preorder Traversal,145. Binary Tree Postorder Traversal
There are three different types of depth-first traversals, :

- PreOrder traversal - visit the parent first and then left and right children;

                                        先父母，再左孩子，再右孩子

- InOrder traversal - visit the left child, then the parent and the right child;

                                       先左孩子，再父母，再右孩子

- PostOrder traversal - visit left child, then the right child and then the parent;

                                       先左孩子，再右孩子，再父母
    /**
     * 递归先序遍历
     * */
    public void preOrderRecursion(TreeNode node){
        if(node==null) //如果结点为空则返回
            return;
        visit(node);//访问根节点
        preOrderRecursion(node.left);//访问左孩子
        preOrderRecursion(node.right);//访问右孩子
    }
        /**
     * 非递归先序遍历二叉树,利用栈来
     * */
   class Solution {
    public List<Integer> preorderTraversal(TreeNode root) {
        List<Integer> result=new ArrayList<Integer>();
        Stack<TreeNode> stack=new Stack<TreeNode>();
        while(root!=null||!stack.empty()){
            if(root!=null){
                result.add(root.val);
                stack.push(root);
                root=root.left;
            }   
            else{
                root=stack.pop();
                root=root.right;
            }
        }
    return result;
    }
}
    参考链接另外的方法：
    https://blog.csdn.net/linhuanmars/article/details/21428647
    
    /**
     * 递归中序遍历 recursive
     * */
    public void inOrderRecursion(TreeNode node){
        if(node==null) //如果结点为空则返回
            return;
        inOrderRecursion(node.left);//访问左孩子
        visit(node);//访问根节点
        inOrderRecursion(node.right);//访问右孩子
    }
     /**
     * 非递归中序遍历 iterative
     * */
class Solution {
    public List<Integer> inorderTraversal(TreeNode root) {
        List<Integer> result=new ArrayList<Integer>();
        Stack<TreeNode> stack=new Stack<TreeNode>();
        while(root!=null||!stack.empty()){
            if(root!=null){
                stack.push(root); //记录parent node
                root=root.left;
            }
            else{
                root=stack.pop(); //回到parent node
                result.add(root.val);//把parent node值记录到最后结果中
                root=root.right; 
            }
        }
        return result;
    }
}
参考链接另外的方法：
https://blog.csdn.net/linhuanmars/article/details/20187257

  /**
     * 递归后序遍历
     * */
    public void postOrderRecursion(TreeNode node){
        if(node==null) //如果结点为空则返回
            return;
        postOrderRecursion(node.left);//访问左孩子
        postOrderRecursion(node.right);//访问右孩子
        visit(node);//访问根节点
    }
/**
     * 非递归后序遍历
     * */
class Solution {
    public List<Integer> postorderTraversal(TreeNode root) {
        LinkedList<Integer> result=new LinkedList<Integer>();
        Stack<TreeNode> stack=new Stack<TreeNode>();
        while(root!=null||!stack.empty()){
            if(root!=null){
                stack.push(root);
                result.addFirst(root.val); //倒序记录值
                root=root.right; 
            }
            else{
                root=stack.pop();
                root=root.left;
            }
        }
    return result;
    }
}

参考链接另外的方法：
https://blog.csdn.net/linhuanmars/article/details/20187257


257 Binary Tree Paths
/**
      Definition for a binary tree node.

  public class TreeNode {
  int val;
  TreeNode left;
  TreeNode right;
  TreeNode(int x) { val = x; }
  }

*/
class Solution {

  public List binaryTreePaths(TreeNode root) {
    List result = new ArrayList();
    if (root !=null) searchBT(root, "", result);
    return result;
  }
  private void searchBT(TreeNode root, String path, List result){
    if (root.left == null && root.right == null) result.add(path + root.val);
    if (root.left != null) searchBT(root.left, path + root.val + "->", result);
    if (root.right != null) searchBT(root.right, path + root.val + "->", result);
  }

}

113. Path Sum II

Given a binary tree and a sum, find all root-to-leaf paths where each path's sum equals the given sum.
Note: A leaf is a node with no children.

/**

  Definition for a binary tree node.
  public class TreeNode {
    int val;
    TreeNode left;
    TreeNode right;
    TreeNode(int x) { val = x; }
  }

*/
class Solution {
    public List<List<Integer>> pathSum(TreeNode root, int sum) {
        List<List<Integer>> result = new ArrayList<List<Integer>>();
        List<Integer> path = new ArrayList<Integer>();
        searchPathSum(root, path, sum, result);
        return result;
    }
    private void searchPathSum(TreeNode root, List<Integer> path, int sum, List<List<Integer>> result){
        if(root == null){
            return;
        }
        path.add(root.val);
        if(root.left == null && root.right ==null & root.val == sum){
            result.add(new ArrayList<Integer>(path));
        }
        if(root.left != null) searchPathS